(wx["webpackJsonp"] = wx["webpackJsonp"] || []).push([["vendors-node_modules_taro_weapp_prebundle_tarojs_redux_js"],{

/***/ "./node_modules/.taro/weapp/prebundle/@tarojs_redux.core.js":
/*!******************************************************************!*\
  !*** ./node_modules/.taro/weapp/prebundle/@tarojs_redux.core.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _chunk_P7VEE7PG_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-P7VEE7PG.js */ "./node_modules/.taro/weapp/prebundle/chunk-P7VEE7PG.js");
/* provided dependency */ var window = __webpack_require__(/*! ./node_modules/.taro/weapp/prebundle/chunk-5P64A5DQ.js */ "./node_modules/.taro/weapp/prebundle/chunk-5P64A5DQ.js")["window$1"];

// node_modules/@tarojs/redux/node_modules/@tarojs/taro/dist/index.esm.js
var index_esm_exports = {};
(0,_chunk_P7VEE7PG_js__WEBPACK_IMPORTED_MODULE_0__.__export)(index_esm_exports, {
    Component: ()=>Component,
    Current: ()=>Current,
    ENV_TYPE: ()=>ENV_TYPE,
    Events: ()=>Events,
    Link: ()=>Link,
    RefsArray: ()=>RefsArray,
    commitAttachRef: ()=>commitAttachRef,
    createContext: ()=>createContext,
    createRef: ()=>createRef,
    default: ()=>index_esm_default,
    detachAllRef: ()=>detachAllRef,
    eventCenter: ()=>eventCenter,
    getEnv: ()=>getEnv,
    getIsUsingDiff: ()=>getIsUsingDiff,
    handleLoopRef: ()=>handleLoopRef,
    initPxTransform: ()=>initPxTransform,
    interceptors: ()=>interceptors,
    internal_force_update: ()=>forceUpdateCallback,
    internal_get_original: ()=>getOriginal,
    internal_inline_style: ()=>inlineStyle,
    internal_safe_get: ()=>get,
    internal_safe_set: ()=>set$1,
    invokeEffects: ()=>invokeEffects,
    memo: ()=>memo,
    noPromiseApis: ()=>noPromiseApis,
    onAndSyncApis: ()=>onAndSyncApis,
    otherApis: ()=>otherApis,
    render: ()=>render,
    setIsUsingDiff: ()=>setIsUsingDiff,
    useAddToFavorites: ()=>useAddToFavorites,
    useCallback: ()=>useCallback,
    useContext: ()=>useContext,
    useDidHide: ()=>useDidHide,
    useDidShow: ()=>useDidShow,
    useEffect: ()=>useEffect,
    useImperativeHandle: ()=>useImperativeHandle,
    useLayoutEffect: ()=>useLayoutEffect,
    useMemo: ()=>useMemo,
    usePageScroll: ()=>usePageScroll,
    usePullDownRefresh: ()=>usePullDownRefresh,
    useReachBottom: ()=>useReachBottom,
    useReducer: ()=>useReducer,
    useRef: ()=>useRef,
    useResize: ()=>useResize,
    useRouter: ()=>useRouter,
    useScope: ()=>useScope,
    useShareAppMessage: ()=>useShareAppMessage,
    useShareTimeline: ()=>useShareTimeline,
    useState: ()=>useState,
    useTabItemTap: ()=>useTabItemTap
});
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread2(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _typeof(obj) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
    } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof(obj);
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    Object.defineProperty(subClass, "prototype", {
        writable: false
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf(o);
}
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
    };
    return _setPrototypeOf(o, p);
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct()) {
        _construct = Reflect.construct.bind();
    } else {
        _construct = function _construct2(Parent2, args2, Class2) {
            var a = [
                null
            ];
            a.push.apply(a, args2);
            var Constructor = Function.bind.apply(Parent2, a);
            var instance = new Constructor();
            if (Class2) _setPrototypeOf(instance, Class2.prototype);
            return instance;
        };
    }
    return _construct.apply(null, arguments);
}
function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
    _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
        if (Class2 === null || !_isNativeFunction(Class2)) return Class2;
        if (typeof Class2 !== "function") {
            throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class2)) return _cache.get(Class2);
            _cache.set(Class2, Wrapper);
        }
        function Wrapper() {
            return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = Object.create(Class2.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return _setPrototypeOf(Wrapper, Class2);
    };
    return _wrapNativeSuper(Class);
}
function _assertThisInitialized(self2) {
    if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
}
function _possibleConstructorReturn(self2, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
        return call;
    } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized(self2);
}
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
    };
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function getValue(object, key) {
    return object == null ? void 0 : object[key];
}
function isHostObject(value) {
    var result = false;
    if (value != null && typeof value.toString !== "function") {
        try {
            result = !!(value + "");
        } catch (e) {}
    }
    return result;
}
function Hash(entries) {
    var index2 = -1, length = entries ? entries.length : 0;
    this.clear();
    while(++index2 < length){
        var entry = entries[index2];
        this.set(entry[0], entry[1]);
    }
}
function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
}
function hashDelete(key) {
    return this.has(key) && delete this.__data__[key];
}
function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
    }
    return hasOwnProperty.call(data, key) ? data[key] : void 0;
}
function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
}
function hashSet(key, value) {
    var data = this.__data__;
    data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
    return this;
}
function ListCache(entries) {
    var index2 = -1, length = entries ? entries.length : 0;
    this.clear();
    while(++index2 < length){
        var entry = entries[index2];
        this.set(entry[0], entry[1]);
    }
}
function listCacheClear() {
    this.__data__ = [];
}
function listCacheDelete(key) {
    var data = this.__data__, index2 = assocIndexOf(data, key);
    if (index2 < 0) {
        return false;
    }
    var lastIndex = data.length - 1;
    if (index2 == lastIndex) {
        data.pop();
    } else {
        splice.call(data, index2, 1);
    }
    return true;
}
function listCacheGet(key) {
    var data = this.__data__, index2 = assocIndexOf(data, key);
    return index2 < 0 ? void 0 : data[index2][1];
}
function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
}
function listCacheSet(key, value) {
    var data = this.__data__, index2 = assocIndexOf(data, key);
    if (index2 < 0) {
        data.push([
            key,
            value
        ]);
    } else {
        data[index2][1] = value;
    }
    return this;
}
function MapCache(entries) {
    var index2 = -1, length = entries ? entries.length : 0;
    this.clear();
    while(++index2 < length){
        var entry = entries[index2];
        this.set(entry[0], entry[1]);
    }
}
function mapCacheClear() {
    this.__data__ = {
        hash: new Hash(),
        map: new (Map$1 || ListCache)(),
        string: new Hash()
    };
}
function mapCacheDelete(key) {
    return getMapData(this, key)["delete"](key);
}
function mapCacheGet(key) {
    return getMapData(this, key).get(key);
}
function mapCacheHas(key) {
    return getMapData(this, key).has(key);
}
function mapCacheSet(key, value) {
    getMapData(this, key).set(key, value);
    return this;
}
function assocIndexOf(array, key) {
    var length = array.length;
    while(length--){
        if (eq(array[length][0], key)) {
            return length;
        }
    }
    return -1;
}
function baseGet(object, path) {
    path = isKey(path, object) ? [
        path
    ] : castPath(path);
    var index2 = 0, length = path.length;
    while(object != null && index2 < length){
        object = object[toKey(path[index2++])];
    }
    return index2 && index2 == length ? object : void 0;
}
function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
        return false;
    }
    var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
}
function baseToString(value) {
    if (typeof value === "string") {
        return value;
    }
    if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
    }
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY ? "-0" : result;
}
function castPath(value) {
    return isArray(value) ? value : stringToPath(value);
}
function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key === "string" ? "string" : "hash"] : data.map;
}
function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : void 0;
}
function isKey(value, object) {
    if (isArray(value)) {
        return false;
    }
    var type = _typeof(value);
    if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
}
function isKeyable(value) {
    var type = _typeof(value);
    return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
}
function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
}
function toKey(value) {
    if (typeof value === "string" || isSymbol(value)) {
        return value;
    }
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY ? "-0" : result;
}
function toSource(func) {
    if (func != null) {
        try {
            return funcToString.call(func);
        } catch (e) {}
        try {
            return func + "";
        } catch (e) {}
    }
    return "";
}
function memoize(func, resolver) {
    if (typeof func !== "function" || resolver && typeof resolver !== "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
    }
    var memoized = function memoized2() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized2.cache;
        if (cache.has(key)) {
            return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized2.cache = cache.set(key, result);
        return result;
    };
    memoized.cache = new (memoize.Cache || MapCache)();
    return memoized;
}
function eq(value, other) {
    return value === other || value !== value && other !== other;
}
function isFunction(value) {
    var tag = isObject(value) ? objectToString.call(value) : "";
    return tag == funcTag || tag == genTag;
}
function isObject(value) {
    var type = _typeof(value);
    return !!value && (type == "object" || type == "function");
}
function isObjectLike(value) {
    return !!value && _typeof(value) === "object";
}
function isSymbol(value) {
    return _typeof(value) === "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
}
function toString(value) {
    return value == null ? "" : baseToString(value);
}
function isIndex(value, length) {
    var type = _typeof(value);
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}
function baseAssignValue(object, key, value) {
    if (key == "__proto__") {
        Object.defineProperty(object, key, {
            "configurable": true,
            "enumerable": true,
            "value": value,
            "writable": true
        });
    } else {
        object[key] = value;
    }
}
function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
    }
}
function baseSet(object, path, value, customizer) {
    if (!isObject(object)) {
        return object;
    }
    path = castPath(path, object);
    var length = path.length;
    var lastIndex = length - 1;
    var index2 = -1;
    var nested = object;
    while(nested != null && ++index2 < length){
        var key = toKey(path[index2]);
        var newValue = value;
        if (index2 != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : void 0;
            if (newValue === void 0) {
                newValue = isObject(objValue) ? objValue : isIndex(path[index2 + 1]) ? [] : {};
            }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
    }
    return object;
}
function get(object, path, defaultValue) {
    var result = object == null ? void 0 : baseGet(object, path);
    return result === void 0 ? defaultValue : result;
}
function set$1(object, path, value) {
    return object == null ? object : baseSet(object, path, value);
}
function dashify(str) {
    return str.replace(upperCasePattern, dashLower);
}
function dashLower(c) {
    return "-" + c.toLowerCase();
}
function isObject$1(val) {
    return val != null && _typeof(val) === "object" && Array.isArray(val) === false;
}
function inlineStyle(obj) {
    if (obj == null) {
        return "";
    }
    if (typeof obj === "string") {
        return obj;
    }
    if (obj === null || obj === void 0) {
        return "";
    }
    if (!isObject$1(obj)) {
        throw new TypeError("style \u53EA\u80FD\u662F\u4E00\u4E2A\u5BF9\u8C61\u6216\u5B57\u7B26\u4E32\u3002");
    }
    return Object.keys(obj).map(function(key) {
        return dashify(key).concat(":").concat(obj[key]);
    }).join(";");
}
function getEnv() {
    if (_env) return _env;
    if (typeof jd !== "undefined" && jd.getSystemInfo) {
        _env = ENV_TYPE.JD;
        return ENV_TYPE.JD;
    }
    if (typeof qq !== "undefined" && qq.getSystemInfo) {
        _env = ENV_TYPE.QQ;
        return ENV_TYPE.QQ;
    }
    if (typeof tt !== "undefined" && tt.getSystemInfo) {
        _env = ENV_TYPE.TT;
        return ENV_TYPE.TT;
    }
    if (typeof wx !== "undefined" && wx.getSystemInfo) {
        _env = ENV_TYPE.WEAPP;
        return ENV_TYPE.WEAPP;
    }
    if (typeof swan !== "undefined" && swan.getSystemInfo) {
        _env = ENV_TYPE.SWAN;
        return ENV_TYPE.SWAN;
    }
    if (typeof my !== "undefined" && my.getSystemInfo) {
        _env = ENV_TYPE.ALIPAY;
        return ENV_TYPE.ALIPAY;
    }
    if (typeof __webpack_require__.g !== "undefined" && __webpack_require__.g.__fbGenNativeModule) {
        _env = ENV_TYPE.RN;
        return ENV_TYPE.RN;
    }
    if (typeof __webpack_require__.g !== "undefined" && __webpack_require__.g.getManifestField) {
        _env = ENV_TYPE.QUICKAPP;
        return ENV_TYPE.QUICKAPP;
    }
    if (typeof window !== "undefined") {
        _env = ENV_TYPE.WEB;
        return ENV_TYPE.WEB;
    }
    return "Unknown environment";
}
function isObject$2(arg) {
    return arg === Object(arg) && typeof arg !== "function";
}
function getOriginal(item) {
    if (env === null) {
        env = getEnv();
    }
    if (isObject$2(item)) {
        return item[env === ENV_TYPE.SWAN ? "privateOriginal" : "$original"] || item;
    }
    return item;
}
function render() {}
function createRef() {
    return {
        current: null
    };
}
function commitAttachRef(ref, target, component, refs) {
    var isInit = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
    if (isInit && !target) return;
    if ("refName" in ref && ref["refName"]) {
        refs[ref.refName] = target;
    } else if ("fn" in ref && typeof ref["fn"] === "function") {
        ref["fn"].call(component, target);
    } else if (ref["fn"] && _typeof(ref["fn"]) === "object" && "current" in ref["fn"]) {
        ref["fn"].current = target;
    }
}
function detachAllRef(component) {
    if (component["$$refs"] && component["$$refs"].length > 0) {
        component["$$refs"].forEach(function(ref) {
            if (typeof ref["fn"] === "function") {
                ref["fn"].call(component, null);
            } else if (ref["fn"] && _typeof(ref["fn"]) === "object" && "current" in ref["fn"]) {
                ref["fn"].current = null;
            }
            if ("target" in ref) delete ref["target"];
        });
        component.refs = {};
    }
}
function handleLoopRef(getElementById) {
    return function(component, id, type, handler) {
        if (!component) return null;
        var dom = getElementById(component, id, type);
        var handlerType = _typeof(handler);
        if (handlerType !== "function" && handlerType !== "object") {
            return console.warn("\u5FAA\u73AF Ref \u53EA\u652F\u6301\u51FD\u6570\u6216 createRef()\uFF0C\u5F53\u524D\u7C7B\u578B\u4E3A\uFF1A".concat(handlerType));
        }
        if (handlerType === "object") {
            handler.current = dom;
        } else if (handlerType === "function") {
            handler.call(component.$component, dom);
        }
    };
}
function timeoutInterceptor(chain) {
    var requestParams = chain.requestParams;
    var p;
    var res = new Promise(function(resolve, reject) {
        var timeout = setTimeout(function() {
            timeout = null;
            reject(new Error("\u7F51\u7EDC\u94FE\u63A5\u8D85\u65F6,\u8BF7\u7A0D\u540E\u518D\u8BD5\uFF01"));
        }, requestParams && requestParams.timeout || 6e4);
        p = chain.proceed(requestParams);
        p.then(function(res2) {
            if (!timeout) return;
            clearTimeout(timeout);
            resolve(res2);
        })["catch"](function(err) {
            timeout && clearTimeout(timeout);
            reject(err);
        });
    });
    if (typeof p.abort === "function") res.abort = p.abort;
    return res;
}
function logInterceptor(chain) {
    var requestParams = chain.requestParams;
    var method = requestParams.method, data = requestParams.data, url = requestParams.url;
    console.log("http ".concat(method || "GET", " --> ").concat(url, " data: "), data);
    var p = chain.proceed(requestParams);
    var res = p.then(function(res2) {
        console.log("http <-- ".concat(url, " result:"), res2);
        return res2;
    });
    if (typeof p.abort === "function") res.abort = p.abort;
    return res;
}
function initPxTransform(config) {
    var _config$designWidth = config.designWidth, designWidth = _config$designWidth === void 0 ? 700 : _config$designWidth, _config$deviceRatio = config.deviceRatio, deviceRatio = _config$deviceRatio === void 0 ? {
        "640": 2.34 / 2,
        "750": 1,
        "828": 1.81 / 2
    } : _config$deviceRatio;
    this.config = this.config || {};
    this.config.designWidth = designWidth;
    this.config.deviceRatio = deviceRatio;
}
function objectIs(x, y) {
    if (x === y) {
        return x !== 0 || 1 / x === 1 / y;
    }
    return x !== x && y !== y;
}
function isFunction$1(arg) {
    return typeof arg === "function";
}
function isUndefined(o) {
    return o === void 0;
}
function isArray$1(arg) {
    return Array.isArray(arg);
}
function isNullOrUndef(o) {
    return isUndefined(o) || o === null;
}
function getIsUsingDiff() {
    return isUsingDiff;
}
function setIsUsingDiff(flag) {
    isUsingDiff = Boolean(flag);
}
function forceUpdateCallback() {}
function getHooks(index2) {
    if (Current.current === null) {
        throw new Error("invalid hooks call: hooks can only be called in a stateless component.");
    }
    var hooks = Current.current.hooks;
    if (index2 >= hooks.length) {
        hooks.push({});
    }
    return hooks[index2];
}
function useState(initialState) {
    if (isFunction$1(initialState)) {
        initialState = initialState();
    }
    var hook = getHooks(Current.index++);
    if (!hook.state) {
        hook.component = Current.current;
        hook.state = [
            initialState,
            function(action) {
                var nextState = isFunction$1(action) ? action(hook.state[0]) : action;
                if (hook.state[0] === nextState) return;
                hook.state[0] = nextState;
                hook.component._disable = false;
                hook.component.setState({}, forceUpdateCallback);
            }
        ];
    }
    return hook.state;
}
function usePageLifecycle(callback, lifecycle) {
    var hook = getHooks(Current.index++);
    if (!hook.marked) {
        hook.marked = true;
        hook.component = Current.current;
        hook.callback = callback;
        var component = hook.component;
        var originalLifecycle = component[lifecycle];
        hook.component[lifecycle] = function() {
            var callback2 = hook.callback;
            originalLifecycle && originalLifecycle.call.apply(originalLifecycle, [
                component
            ].concat(Array.prototype.slice.call(arguments)));
            return callback2 && callback2.call.apply(callback2, [
                component
            ].concat(Array.prototype.slice.call(arguments)));
        };
    } else {
        hook.callback = callback;
    }
}
function useDidShow(callback) {
    usePageLifecycle(callback, "componentDidShow");
}
function useDidHide(callback) {
    usePageLifecycle(callback, "componentDidHide");
}
function usePullDownRefresh(callback) {
    usePageLifecycle(callback, "onPullDownRefresh");
}
function useReachBottom(callback) {
    usePageLifecycle(callback, "onReachBottom");
}
function usePageScroll(callback) {
    usePageLifecycle(callback, "onPageScroll");
}
function useResize(callback) {
    usePageLifecycle(callback, "onResize");
}
function useShareAppMessage(callback) {
    usePageLifecycle(callback, "onShareAppMessage");
}
function useTabItemTap(callback) {
    usePageLifecycle(callback, "onTabItemTap");
}
function useShareTimeline(callback) {
    usePageLifecycle(callback, "onShareTimeline");
}
function useAddToFavorites(callback) {
    usePageLifecycle(callback, "onAddToFavorites");
}
function useRouter() {
    var hook = getHooks(Current.index++);
    if (!hook.router) {
        hook.component = Current.current;
        hook.router = hook.component.$router;
    }
    return hook.router;
}
function useScope() {
    var hook = getHooks(Current.index++);
    if (!hook.scope) {
        hook.component = Current.current;
        hook.scope = hook.component.$scope;
    }
    return hook.scope;
}
function useReducer(reducer, initialState, initializer) {
    if (isFunction$1(initialState)) {
        initialState = initialState();
    }
    var hook = getHooks(Current.index++);
    if (!hook.state) {
        hook.component = Current.current;
        hook.state = [
            isUndefined(initializer) ? initialState : initializer(initialState),
            function(action) {
                hook.state[0] = reducer(hook.state[0], action);
                hook.component._disable = false;
                hook.component.setState({}, forceUpdateCallback);
            }
        ];
    }
    return hook.state;
}
function areDepsChanged(prevDeps, deps) {
    if (isNullOrUndef(prevDeps) || isNullOrUndef(deps)) {
        return true;
    }
    return deps.some(function(d, i) {
        return !objectIs(d, prevDeps[i]);
    });
}
function invokeEffects(component, delay) {
    var effects = delay ? component.effects : component.layoutEffects;
    effects.forEach(function(hook) {
        if (isFunction$1(hook.cleanup)) {
            hook.cleanup();
        }
        var result = hook.effect();
        if (isFunction$1(result)) {
            hook.cleanup = result;
        }
    });
    if (delay) {
        component.effects = [];
    } else {
        component.layoutEffects = [];
    }
}
function invokeScheduleEffects(component) {
    if (!component._afterScheduleEffect) {
        component._afterScheduleEffect = true;
        scheduleEffectComponents.push(component);
        if (scheduleEffectComponents.length === 1) {
            defer(function() {
                setTimeout(function() {
                    scheduleEffectComponents.forEach(function(c) {
                        c._afterScheduleEffect = false;
                        invokeEffects(c, true);
                    });
                    scheduleEffectComponents = [];
                }, 0);
            });
        }
    }
}
function useEffectImpl(effect, deps, delay) {
    var hook = getHooks(Current.index++);
    if (Current.current._disableEffect || !Current.current.__isReady) {
        return;
    }
    if (areDepsChanged(hook.deps, deps)) {
        hook.effect = effect;
        hook.deps = deps;
        if (delay) {
            Current.current.effects = Current.current.effects.concat(hook);
            invokeScheduleEffects(Current.current);
        } else {
            Current.current.layoutEffects = Current.current.layoutEffects.concat(hook);
        }
    }
}
function useEffect(effect, deps) {
    useEffectImpl(effect, deps, true);
}
function useLayoutEffect(effect, deps) {
    useEffectImpl(effect, deps);
}
function useRef(initialValue) {
    var hook = getHooks(Current.index++);
    if (!hook.ref) {
        hook.ref = {
            current: initialValue
        };
    }
    return hook.ref;
}
function useMemo(factory, deps) {
    var hook = getHooks(Current.index++);
    if (areDepsChanged(hook.deps, deps)) {
        hook.deps = deps;
        hook.callback = factory;
        hook.value = factory();
    }
    return hook.value;
}
function useCallback(callback, deps) {
    return useMemo(function() {
        return callback;
    }, deps);
}
function useImperativeHandle(ref, init, deps) {
    useLayoutEffect(function() {
        if (isFunction$1(ref)) {
            ref(init());
            return function() {
                return ref(null);
            };
        } else if (!isUndefined(ref)) {
            ref.current = init();
            return function() {
                delete ref.current;
            };
        }
    }, isArray$1(deps) ? deps.concat([
        ref
    ]) : void 0);
}
function useContext(_ref) {
    var context = _ref.context;
    var emitter = context.emitter;
    if (emitter === null) {
        return context._defaultValue;
    }
    var hook = getHooks(Current.index++);
    if (isUndefined(hook.context)) {
        hook.context = true;
        hook.component = Current.current;
        emitter.on(function(_) {
            if (hook.component) {
                hook.component._disable = false;
                hook.component.setState({});
            }
        });
    }
    return emitter.value;
}
function createContext(defaultValue) {
    var contextId = "__context_" + contextUid++ + "__";
    var context = {
        emitter: null,
        _id: contextId,
        _defaultValue: defaultValue
    };
    function Provider(newValue) {
        var emitter = context.emitter;
        if (!emitter) {
            context.emitter = new Emitter(defaultValue);
        } else {
            emitter.set(newValue);
        }
    }
    return {
        Provider,
        context
    };
}
function shallowEqual(obj1, obj2) {
    if (_typeof(obj1) !== "object" && _typeof(obj2) !== "object") {
        return obj1 === obj2;
    }
    if (obj1 === null && obj2 === null) {
        return true;
    }
    if (obj1 === null || obj2 === null) {
        return false;
    }
    if (objectIs$1(obj1, obj2)) {
        return true;
    }
    var obj1Keys = obj1 ? Object.keys(obj1) : [];
    var obj2Keys = obj2 ? Object.keys(obj2) : [];
    if (obj1Keys.length !== obj2Keys.length) {
        return false;
    }
    for(var i = 0; i < obj1Keys.length; i++){
        var obj1KeyItem = obj1Keys[i];
        if (!obj2.hasOwnProperty(obj1KeyItem) || !objectIs$1(obj1[obj1KeyItem], obj2[obj1KeyItem])) {
            return false;
        }
    }
    return true;
}
function memo(component, propsAreEqual) {
    component.prototype.shouldComponentUpdate = function(nextProps) {
        return isFunction$1(propsAreEqual) ? !propsAreEqual(this.props, nextProps) : !shallowEqual(this.props, nextProps);
    };
    return component;
}
var Component, FUNC_ERROR_TEXT, HASH_UNDEFINED, INFINITY, funcTag, genTag, symbolTag, reIsDeepProp, reIsPlainProp, reLeadingDot, rePropName, reRegExpChar, reEscapeChar, reIsHostCtor, freeGlobal, freeSelf, root, MAX_SAFE_INTEGER, reIsUint, arrayProto, funcProto, objectProto, coreJsData, maskSrcKey, funcToString, hasOwnProperty, objectToString, reIsNative, _Symbol, splice, Map$1, nativeCreate, symbolProto, symbolToString, stringToPath, isArray, hasOwnProperty, upperCasePattern, ENV_TYPE, _env, env, Events, RefsArray, Chain, Link, interceptors, onAndSyncApis, noPromiseApis, otherApis, defer, isUsingDiff, Current, scheduleEffectComponents, Emitter, contextUid, objectIs$1, eventCenter, index, index_esm_default;
var init_index_esm = (0,_chunk_P7VEE7PG_js__WEBPACK_IMPORTED_MODULE_0__.__esm)({
    "node_modules/@tarojs/redux/node_modules/@tarojs/taro/dist/index.esm.js" () {
        if (typeof Object.assign !== "function") {
            Object.assign = function(target) {
                if (target == null) {
                    throw new TypeError("Cannot convert undefined or null to object");
                }
                var to = Object(target);
                for(var index2 = 1; index2 < arguments.length; index2++){
                    var nextSource = arguments[index2];
                    if (nextSource != null) {
                        for(var nextKey in nextSource){
                            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                                to[nextKey] = nextSource[nextKey];
                            }
                        }
                    }
                }
                return to;
            };
        }
        if (typeof Object.defineProperties !== "function") {
            Object.defineProperties = function(obj, properties) {
                function convertToDescriptor(desc) {
                    function hasProperty(obj2, prop) {
                        return Object.prototype.hasOwnProperty.call(obj2, prop);
                    }
                    function isCallable(v) {
                        return typeof v === "function";
                    }
                    if (_typeof(desc) !== "object" || desc === null) {
                        throw new TypeError("bad desc");
                    }
                    var d = {};
                    if (hasProperty(desc, "enumerable")) d.enumerable = !!desc.enumerable;
                    if (hasProperty(desc, "configurable")) {
                        d.configurable = !!desc.configurable;
                    }
                    if (hasProperty(desc, "value")) d.value = desc.value;
                    if (hasProperty(desc, "writable")) d.writable = !!desc.writable;
                    if (hasProperty(desc, "get")) {
                        var g = desc.get;
                        if (!isCallable(g) && typeof g !== "undefined") {
                            throw new TypeError("bad get");
                        }
                        d.get = g;
                    }
                    if (hasProperty(desc, "set")) {
                        var s = desc.set;
                        if (!isCallable(s) && typeof s !== "undefined") {
                            throw new TypeError("bad set");
                        }
                        d.set = s;
                    }
                    if (("get" in d || "set" in d) && ("value" in d || "writable" in d)) {
                        throw new TypeError("identity-confused descriptor");
                    }
                    return d;
                }
                if (_typeof(obj) !== "object" || obj === null) throw new TypeError("bad obj");
                properties = Object(properties);
                var keys = Object.keys(properties);
                var descs = [];
                for(var i = 0; i < keys.length; i++){
                    descs.push([
                        keys[i],
                        convertToDescriptor(properties[keys[i]])
                    ]);
                }
                for(var i = 0; i < descs.length; i++){
                    Object.defineProperty(obj, descs[i][0], descs[i][1]);
                }
                return obj;
            };
        }
        Component = _createClass(function Component2(props) {
            _classCallCheck(this, Component2);
            this.state = {};
            this.props = props || {};
        });
        FUNC_ERROR_TEXT = "Expected a function";
        HASH_UNDEFINED = "__lodash_hash_undefined__";
        INFINITY = 1 / 0;
        funcTag = "[object Function]";
        genTag = "[object GeneratorFunction]";
        symbolTag = "[object Symbol]";
        reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
        reIsPlainProp = /^\w*$/;
        reLeadingDot = /^\./;
        rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
        reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
        reEscapeChar = /\\(\\)?/g;
        reIsHostCtor = /^\[object .+?Constructor\]$/;
        freeGlobal = (typeof __webpack_require__.g === "undefined" ? "undefined" : _typeof(__webpack_require__.g)) === "object" && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;
        freeSelf = (typeof self === "undefined" ? "undefined" : _typeof(self)) === "object" && self && self.Object === Object && self;
        root = freeGlobal || freeSelf || Function("return this")();
        MAX_SAFE_INTEGER = 9007199254740991;
        reIsUint = /^(?:0|[1-9]\d*)$/;
        arrayProto = Array.prototype;
        funcProto = Function.prototype;
        objectProto = Object.prototype;
        coreJsData = root["__core-js_shared__"];
        maskSrcKey = function() {
            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
            return uid ? "Symbol(src)_1." + uid : "";
        }();
        funcToString = funcProto.toString;
        hasOwnProperty = objectProto.hasOwnProperty;
        objectToString = objectProto.toString;
        reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
        _Symbol = root.Symbol;
        splice = arrayProto.splice;
        Map$1 = getNative(root, "Map");
        nativeCreate = getNative(Object, "create");
        symbolProto = _Symbol ? _Symbol.prototype : void 0;
        symbolToString = symbolProto ? symbolProto.toString : void 0;
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        stringToPath = memoize(function(string) {
            string = toString(string);
            var result = [];
            if (reLeadingDot.test(string)) {
                result.push("");
            }
            string.replace(rePropName, function(match, number, quote, string2) {
                result.push(quote ? string2.replace(reEscapeChar, "$1") : number || match);
            });
            return result;
        });
        memoize.Cache = MapCache;
        isArray = Array.isArray;
        hasOwnProperty = Object.prototype.hasOwnProperty;
        upperCasePattern = /([A-Z])/g;
        ENV_TYPE = {
            WEAPP: "WEAPP",
            WEB: "WEB",
            RN: "RN",
            SWAN: "SWAN",
            ALIPAY: "ALIPAY",
            QUICKAPP: "QUICKAPP",
            TT: "TT",
            QQ: "QQ",
            JD: "JD"
        };
        _env = null;
        env = null;
        Events = function() {
            function Events2(opts) {
                _classCallCheck(this, Events2);
                if (typeof opts !== "undefined" && opts.callbacks) {
                    this.callbacks = opts.callbacks;
                } else {
                    this.callbacks = {};
                }
            }
            _createClass(Events2, [
                {
                    key: "on",
                    value: function on(events, callback, context) {
                        var calls, event, node, tail, list;
                        if (!callback) {
                            return this;
                        }
                        events = events.split(Events2.eventSplitter);
                        calls = this.callbacks;
                        while(event = events.shift()){
                            list = calls[event];
                            node = list ? list.tail : {};
                            node.next = tail = {};
                            node.context = context;
                            node.callback = callback;
                            calls[event] = {
                                tail,
                                next: list ? list.next : node
                            };
                        }
                        return this;
                    }
                },
                {
                    key: "once",
                    value: function once(events, callback, context) {
                        var _this = this;
                        var wrapper = function wrapper2() {
                            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                                args[_key] = arguments[_key];
                            }
                            callback.apply(_this, args);
                            _this.off(events, wrapper2, context);
                        };
                        this.on(events, wrapper, context);
                        return this;
                    }
                },
                {
                    key: "off",
                    value: function off(events, callback, context) {
                        var event, calls, node, tail, cb, ctx;
                        if (!(calls = this.callbacks)) {
                            return this;
                        }
                        if (!(events || callback || context)) {
                            delete this.callbacks;
                            return this;
                        }
                        events = events ? events.split(Events2.eventSplitter) : Object.keys(calls);
                        while(event = events.shift()){
                            node = calls[event];
                            delete calls[event];
                            if (!node || !(callback || context)) {
                                continue;
                            }
                            tail = node.tail;
                            while((node = node.next) !== tail){
                                cb = node.callback;
                                ctx = node.context;
                                if (callback && cb !== callback || context && ctx !== context) {
                                    this.on(event, cb, ctx);
                                }
                            }
                        }
                        return this;
                    }
                },
                {
                    key: "trigger",
                    value: function trigger(events) {
                        var event, node, calls, tail, rest;
                        if (!(calls = this.callbacks)) {
                            return this;
                        }
                        events = events.split(Events2.eventSplitter);
                        rest = [].slice.call(arguments, 1);
                        while(event = events.shift()){
                            if (node = calls[event]) {
                                tail = node.tail;
                                while((node = node.next) !== tail){
                                    node.callback.apply(node.context || this, rest);
                                }
                            }
                        }
                        return this;
                    }
                }
            ]);
            return Events2;
        }();
        Events.eventSplitter = /\s+/;
        RefsArray = function(_Array) {
            _inherits(RefsArray2, _Array);
            var _super = _createSuper(RefsArray2);
            function RefsArray2() {
                var _this;
                var initList = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
                _classCallCheck(this, RefsArray2);
                _this = _super.call.apply(_super, [
                    this
                ].concat(_toConsumableArray(initList)));
                _this.inited = false;
                return _this;
            }
            _createClass(RefsArray2, [
                {
                    key: "pushRefs",
                    value: function pushRefs($$refs) {
                        var _this2 = this;
                        if (this.inited) return;
                        $$refs.forEach(function(ref) {
                            return _this2.pushRef(ref);
                        });
                        this.inited = true;
                    }
                },
                {
                    key: "pushRef",
                    value: function pushRef(ref) {
                        var isExist = this.find(function(item) {
                            return item.id === ref.id;
                        });
                        !isExist && this.push(ref);
                    }
                }
            ]);
            return RefsArray2;
        }(_wrapNativeSuper(Array));
        Chain = function() {
            function Chain2(requestParams) {
                var interceptors2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
                var index2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
                _classCallCheck(this, Chain2);
                this.index = index2;
                this.requestParams = requestParams;
                this.interceptors = interceptors2;
            }
            _createClass(Chain2, [
                {
                    key: "proceed",
                    value: function proceed(requestParams) {
                        this.requestParams = requestParams;
                        if (this.index >= this.interceptors.length) {
                            throw new Error("chain \u53C2\u6570\u9519\u8BEF, \u8BF7\u52FF\u76F4\u63A5\u4FEE\u6539 request.chain");
                        }
                        var nextInterceptor = this._getNextInterceptor();
                        var nextChain = this._getNextChain();
                        var p = nextInterceptor(nextChain);
                        var res = p["catch"](function(err) {
                            return Promise.reject(err);
                        });
                        if (typeof p.abort === "function") res.abort = p.abort;
                        if (typeof p.onHeadersReceived === "function") res.onHeadersReceived = p.onHeadersReceived;
                        if (typeof p.offHeadersReceived === "function") res.offHeadersReceived = p.offHeadersReceived;
                        return res;
                    }
                },
                {
                    key: "_getNextInterceptor",
                    value: function _getNextInterceptor() {
                        return this.interceptors[this.index];
                    }
                },
                {
                    key: "_getNextChain",
                    value: function _getNextChain() {
                        return new Chain2(this.requestParams, this.interceptors, this.index + 1);
                    }
                }
            ]);
            return Chain2;
        }();
        Link = function() {
            function Link2(interceptor) {
                _classCallCheck(this, Link2);
                this.taroInterceptor = interceptor;
                this.chain = new Chain();
            }
            _createClass(Link2, [
                {
                    key: "request",
                    value: function request(requestParams) {
                        var _this = this;
                        this.chain.interceptors = this.chain.interceptors.filter(function(interceptor) {
                            return interceptor !== _this.taroInterceptor;
                        });
                        this.chain.interceptors.push(this.taroInterceptor);
                        return this.chain.proceed(_objectSpread2({}, requestParams));
                    }
                },
                {
                    key: "addInterceptor",
                    value: function addInterceptor(interceptor) {
                        this.chain.interceptors.push(interceptor);
                    }
                },
                {
                    key: "cleanInterceptors",
                    value: function cleanInterceptors() {
                        this.chain = new Chain();
                    }
                }
            ]);
            return Link2;
        }();
        interceptors = Object.freeze({
            timeoutInterceptor,
            logInterceptor
        });
        onAndSyncApis = {
            onSocketOpen: true,
            onSocketError: true,
            onSocketMessage: true,
            onSocketClose: true,
            onBackgroundAudioPlay: true,
            onBackgroundAudioPause: true,
            onBackgroundAudioStop: true,
            onNetworkStatusChange: true,
            onAccelerometerChange: true,
            offAccelerometerChange: true,
            onCompassChange: true,
            onBluetoothAdapterStateChange: true,
            onBluetoothDeviceFound: true,
            onBLEConnectionStateChange: true,
            onBLECharacteristicValueChange: true,
            onBeaconUpdate: true,
            onBeaconServiceChange: true,
            onUserCaptureScreen: true,
            onHCEMessage: true,
            onGetWifiList: true,
            onWifiConnected: true,
            offWifiConnected: true,
            offGetWifiList: true,
            onDeviceMotionChange: true,
            setStorageSync: true,
            getStorageSync: true,
            getStorageInfoSync: true,
            removeStorageSync: true,
            clearStorageSync: true,
            getSystemInfoSync: true,
            getExtConfigSync: true,
            getLogManager: true,
            onMemoryWarning: true,
            reportMonitor: true,
            reportAnalytics: true,
            navigateToSmartGameProgram: true,
            getFileSystemManager: true,
            getLaunchOptionsSync: true,
            onPageNotFound: true,
            onError: true,
            onAppShow: true,
            onAppHide: true,
            offPageNotFound: true,
            offError: true,
            offAppShow: true,
            offAppHide: true,
            onAudioInterruptionEnd: true,
            onAudioInterruptionBegin: true,
            onLocationChange: true,
            offLocationChange: true,
            onLocalServiceResolveFail: true,
            onLocalServiceLost: true,
            onLocalServiceFound: true,
            onLocalServiceDiscoveryStop: true,
            offLocalServiceResolveFail: true,
            offLocalServiceLost: true,
            offLocalServiceFound: true,
            offLocalServiceDiscoveryStop: true,
            onGyroscopeChange: true,
            offGyroscopeChange: true
        };
        noPromiseApis = {
            stopRecord: true,
            getRecorderManager: true,
            pauseVoice: true,
            stopVoice: true,
            pauseBackgroundAudio: true,
            stopBackgroundAudio: true,
            getBackgroundAudioManager: true,
            createAudioContext: true,
            createInnerAudioContext: true,
            createVideoContext: true,
            createCameraContext: true,
            createLivePlayerContext: true,
            createLivePusherContext: true,
            createMapContext: true,
            canIUse: true,
            startAccelerometer: true,
            stopAccelerometer: true,
            startCompass: true,
            stopCompass: true,
            hideToast: true,
            hideLoading: true,
            showNavigationBarLoading: true,
            hideNavigationBarLoading: true,
            createAnimation: true,
            createSelectorQuery: true,
            createOffscreenCanvas: true,
            createCanvasContext: true,
            drawCanvas: true,
            hideKeyboard: true,
            stopPullDownRefresh: true,
            createIntersectionObserver: true,
            nextTick: true,
            getMenuButtonBoundingClientRect: true,
            onWindowResize: true,
            offWindowResize: true,
            arrayBufferToBase64: true,
            base64ToArrayBuffer: true,
            getAccountInfoSync: true,
            getUpdateManager: true,
            createWorker: true,
            createRewardedVideoAd: true,
            createInterstitialAd: true,
            getRealtimeLogManager: true
        };
        otherApis = {
            uploadFile: true,
            downloadFile: true,
            connectSocket: true,
            sendSocketMessage: true,
            closeSocket: true,
            chooseImage: true,
            chooseMessageFile: true,
            chooseMedia: true,
            previewImage: true,
            getImageInfo: true,
            compressImage: true,
            saveImageToPhotosAlbum: true,
            startRecord: true,
            playVoice: true,
            setInnerAudioOption: true,
            getAvailableAudioSources: true,
            getBackgroundAudioPlayerState: true,
            playBackgroundAudio: true,
            seekBackgroundAudio: true,
            chooseVideo: true,
            saveVideoToPhotosAlbum: true,
            loadFontFace: true,
            saveFile: true,
            getFileInfo: true,
            getSavedFileList: true,
            getSavedFileInfo: true,
            removeSavedFile: true,
            openDocument: true,
            setStorage: true,
            getStorage: true,
            getStorageInfo: true,
            removeStorage: true,
            clearStorage: true,
            navigateBack: true,
            navigateTo: true,
            redirectTo: true,
            switchTab: true,
            reLaunch: true,
            startLocationUpdate: true,
            startLocationUpdateBackground: true,
            stopLocationUpdate: true,
            getLocation: true,
            chooseLocation: true,
            openLocation: true,
            getSystemInfo: true,
            getNetworkType: true,
            makePhoneCall: true,
            scanCode: true,
            setClipboardData: true,
            getClipboardData: true,
            openBluetoothAdapter: true,
            closeBluetoothAdapter: true,
            getBluetoothAdapterState: true,
            startBluetoothDevicesDiscovery: true,
            stopBluetoothDevicesDiscovery: true,
            getBluetoothDevices: true,
            getConnectedBluetoothDevices: true,
            createBLEConnection: true,
            closeBLEConnection: true,
            getBLEDeviceServices: true,
            getBLEDeviceCharacteristics: true,
            readBLECharacteristicValue: true,
            writeBLECharacteristicValue: true,
            notifyBLECharacteristicValueChange: true,
            startBeaconDiscovery: true,
            stopBeaconDiscovery: true,
            getBeacons: true,
            setScreenBrightness: true,
            getScreenBrightness: true,
            setKeepScreenOn: true,
            vibrateLong: true,
            vibrateShort: true,
            addPhoneContact: true,
            getHCEState: true,
            startHCE: true,
            stopHCE: true,
            sendHCEMessage: true,
            startWifi: true,
            stopWifi: true,
            connectWifi: true,
            getWifiList: true,
            setWifiList: true,
            getConnectedWifi: true,
            startDeviceMotionListening: true,
            stopDeviceMotionListening: true,
            startGyroscope: true,
            stopGyroscope: true,
            pageScrollTo: true,
            showToast: true,
            showLoading: true,
            showModal: true,
            showActionSheet: true,
            setNavigationBarTitle: true,
            setNavigationBarColor: true,
            setTabBarBadge: true,
            removeTabBarBadge: true,
            showTabBarRedDot: true,
            hideTabBarRedDot: true,
            setTabBarStyle: true,
            setTabBarItem: true,
            showTabBar: true,
            hideTabBar: true,
            setTopBarText: true,
            startPullDownRefresh: true,
            canvasToTempFilePath: true,
            canvasGetImageData: true,
            canvasPutImageData: true,
            setBackgroundColor: true,
            setBackgroundTextStyle: true,
            getSelectedTextRange: true,
            hideHomeButton: true,
            stopLocalServiceDiscovery: true,
            startLocalServiceDiscovery: true,
            getExtConfig: true,
            login: true,
            checkSession: true,
            authorize: true,
            getUserInfo: true,
            checkIsSupportFacialRecognition: true,
            startFacialRecognitionVerify: true,
            startFacialRecognitionVerifyAndUploadVideo: true,
            faceVerifyForPay: true,
            requestPayment: true,
            showShareMenu: true,
            hideShareMenu: true,
            updateShareMenu: true,
            getShareInfo: true,
            chooseAddress: true,
            addCard: true,
            openCard: true,
            openSetting: true,
            getSetting: true,
            getWeRunData: true,
            navigateToMiniProgram: true,
            navigateBackMiniProgram: true,
            chooseInvoice: true,
            chooseInvoiceTitle: true,
            checkIsSupportSoterAuthentication: true,
            startSoterAuthentication: true,
            checkIsSoterEnrolledInDevice: true,
            getUserProfile: true,
            requestSubscribeMessage: true,
            setEnableDebug: true,
            getOpenUserInfo: true,
            ocrIdCard: true,
            ocrBankCard: true,
            ocrDrivingLicense: true,
            ocrVehicleLicense: true,
            textReview: true,
            textToAudio: true,
            imageAudit: true,
            advancedGeneralIdentify: true,
            objectDetectIdentify: true,
            carClassify: true,
            dishClassify: true,
            logoClassify: true,
            animalClassify: true,
            plantClassify: true,
            setPageInfo: true,
            getSwanId: true,
            requestPolymerPayment: true,
            navigateToSmartProgram: true,
            navigateBackSmartProgram: true,
            preloadSubPackage: true
        };
        defer = typeof Promise === "function" ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout;
        isUsingDiff = true;
        if (false) {} else {
            Current = {
                current: null,
                index: 0
            };
        }
        scheduleEffectComponents = [];
        Emitter = function() {
            function Emitter2() {
                var value = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                _classCallCheck(this, Emitter2);
                this.value = value;
                this.handlers = [];
            }
            _createClass(Emitter2, [
                {
                    key: "on",
                    value: function on(handler) {
                        this.handlers.push(handler);
                    }
                },
                {
                    key: "off",
                    value: function off(handler) {
                        this.handlers = this.handlers.filter(function(h) {
                            return h !== handler;
                        });
                    }
                },
                {
                    key: "set",
                    value: function set(value) {
                        var _this = this;
                        if (objectIs(value, this.value)) {
                            return;
                        }
                        this.value = value;
                        this.handlers.forEach(function(h) {
                            return h(_this.value);
                        });
                    }
                }
            ]);
            return Emitter2;
        }();
        contextUid = 0;
        objectIs$1 = Object.is || function(x, y) {
            if (x === y) {
                return x !== 0 || 1 / x === 1 / y;
            }
            return x !== x && y !== y;
        };
        if (false) {} else {
            eventCenter = new Events();
        }
        index = {
            Component,
            Events,
            eventCenter,
            getEnv,
            ENV_TYPE,
            render,
            internal_safe_get: get,
            internal_safe_set: set$1,
            internal_inline_style: inlineStyle,
            internal_get_original: getOriginal,
            internal_force_update: forceUpdateCallback,
            noPromiseApis,
            onAndSyncApis,
            otherApis,
            initPxTransform,
            createRef,
            commitAttachRef,
            detachAllRef,
            Link,
            interceptors,
            RefsArray,
            handleLoopRef,
            Current,
            useEffect,
            useLayoutEffect,
            useReducer,
            useState,
            useDidShow,
            useDidHide,
            usePullDownRefresh,
            useReachBottom,
            usePageScroll,
            useResize,
            useShareAppMessage,
            useTabItemTap,
            useRouter,
            useScope,
            useRef,
            useCallback,
            useMemo,
            useImperativeHandle,
            invokeEffects,
            useContext,
            useShareTimeline,
            useAddToFavorites,
            createContext,
            memo,
            getIsUsingDiff,
            setIsUsingDiff
        };
        index_esm_default = index;
    }
});
// node_modules/@tarojs/redux/dist/index.js
var require_dist = (0,_chunk_P7VEE7PG_js__WEBPACK_IMPORTED_MODULE_0__.__commonJS)({
    "node_modules/@tarojs/redux/dist/index.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function _interopDefault(ex) {
            return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
        }
        var Taro = (init_index_esm(), (0,_chunk_P7VEE7PG_js__WEBPACK_IMPORTED_MODULE_0__.__toCommonJS)(index_esm_exports));
        var Taro__default = _interopDefault(Taro);
        var store = null;
        var appGlobal = __webpack_require__.g || {};
        var globalRef = Object.getPrototypeOf(appGlobal) || appGlobal;
        function getStore() {
            if (false) {} else if (false) {}
            return store;
        }
        function setStore(arg) {
            if (false) {} else if (false) {} else {
                store = arg;
            }
        }
        function _typeof2(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                _typeof2 = function(obj2) {
                    return typeof obj2;
                };
            } else {
                _typeof2 = function(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                };
            }
            return _typeof2(obj);
        }
        function _classCallCheck2(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _defineProperties2(target, props) {
            for(var i = 0; i < props.length; i++){
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        function _createClass2(Constructor, protoProps, staticProps) {
            if (protoProps) _defineProperties2(Constructor.prototype, protoProps);
            if (staticProps) _defineProperties2(Constructor, staticProps);
            return Constructor;
        }
        function _inherits2(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function");
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) _setPrototypeOf2(subClass, superClass);
        }
        function _getPrototypeOf2(o) {
            _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
                return o2.__proto__ || Object.getPrototypeOf(o2);
            };
            return _getPrototypeOf2(o);
        }
        function _setPrototypeOf2(o, p) {
            _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf3(o2, p2) {
                o2.__proto__ = p2;
                return o2;
            };
            return _setPrototypeOf2(o, p);
        }
        function _isNativeReflectConstruct2() {
            if (typeof Reflect === "undefined" || !Reflect.construct) return false;
            if (Reflect.construct.sham) return false;
            if (typeof Proxy === "function") return true;
            try {
                Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));
                return true;
            } catch (e) {
                return false;
            }
        }
        function _assertThisInitialized2(self2) {
            if (self2 === void 0) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return self2;
        }
        function _possibleConstructorReturn2(self2, call) {
            if (call && (typeof call === "object" || typeof call === "function")) {
                return call;
            }
            return _assertThisInitialized2(self2);
        }
        function _createSuper2(Derived) {
            var hasNativeReflectConstruct = _isNativeReflectConstruct2();
            return function _createSuperInternal() {
                var Super = _getPrototypeOf2(Derived), result;
                if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf2(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                } else {
                    result = Super.apply(this, arguments);
                }
                return _possibleConstructorReturn2(this, result);
            };
        }
        function _superPropBase(object, property) {
            while(!Object.prototype.hasOwnProperty.call(object, property)){
                object = _getPrototypeOf2(object);
                if (object === null) break;
            }
            return object;
        }
        function _get(target, property, receiver) {
            if (typeof Reflect !== "undefined" && Reflect.get) {
                _get = Reflect.get;
            } else {
                _get = function _get2(target2, property2, receiver2) {
                    var base = _superPropBase(target2, property2);
                    if (!base) return;
                    var desc = Object.getOwnPropertyDescriptor(base, property2);
                    if (desc.get) {
                        return desc.get.call(receiver2);
                    }
                    return desc.value;
                };
            }
            return _get(target, property, receiver || target);
        }
        function _slicedToArray(arr, i) {
            return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray2(arr, i) || _nonIterableRest();
        }
        function _arrayWithHoles(arr) {
            if (Array.isArray(arr)) return arr;
        }
        function _iterableToArrayLimit(arr, i) {
            if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = void 0;
            try {
                for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){
                    _arr.push(_s.value);
                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally{
                try {
                    if (!_n && _i["return"] != null) _i["return"]();
                } finally{
                    if (_d) throw _e;
                }
            }
            return _arr;
        }
        function _unsupportedIterableToArray2(o, minLen) {
            if (!o) return;
            if (typeof o === "string") return _arrayLikeToArray2(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            if (n === "Object" && o.constructor) n = o.constructor.name;
            if (n === "Map" || n === "Set") return Array.from(o);
            if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray2(o, minLen);
        }
        function _arrayLikeToArray2(arr, len) {
            if (len == null || len > arr.length) len = arr.length;
            for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
            return arr2;
        }
        function _nonIterableRest() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        function isObject2(arg) {
            return arg != null && _typeof2(arg) === "object" && !Array.isArray(arg);
        }
        function mergeObjects(obj1, obj2) {
            var result = Object.assign({}, obj1);
            if (isObject2(obj1) && isObject2(obj2)) {
                for(var p in obj2){
                    if (isObject2(obj1[p]) && isObject2(obj2[p])) {
                        result[p] = mergeObjects(obj1[p], obj2[p]);
                    } else {
                        result[p] = obj2[p];
                    }
                }
            }
            return result;
        }
        function wrapPropsWithDispatch(mapDispatchToProps, dispatch) {
            if (typeof mapDispatchToProps === "function") {
                return mapDispatchToProps(dispatch);
            }
            if (isObject2(mapDispatchToProps)) {
                return Object.keys(mapDispatchToProps).reduce(function(props, key) {
                    var actionCreator = mapDispatchToProps[key];
                    if (typeof actionCreator === "function") {
                        props[key] = function() {
                            return dispatch(actionCreator.apply(void 0, arguments));
                        };
                    }
                    return props;
                }, {});
            }
            return {};
        }
        function connect(mapStateToProps, mapDispatchToProps) {
            var store2 = getStore();
            var dispatch = store2.dispatch;
            var initMapDispatch = wrapPropsWithDispatch(mapDispatchToProps, dispatch);
            initMapDispatch.dispatch = dispatch;
            var stateListener = function stateListener2() {
                var _this = this;
                var isChanged = false;
                var newMapState = mapStateToProps(store2.getState(), this.props);
                var prevProps = Object.assign({}, this.props);
                Object.keys(newMapState).forEach(function(key) {
                    var val = newMapState[key];
                    if (isObject2(val) && isObject2(initMapDispatch[key])) {
                        val = mergeObjects(val, initMapDispatch[key]);
                    }
                    if (_this.props[key] !== val) {
                        _this.props[key] = val;
                        isChanged = true;
                    }
                });
                if (isChanged) {
                    if (!this._dirty) {
                        this.prevProps = prevProps;
                    }
                    this._unsafeCallUpdate = true;
                    this.setState({}, function() {
                        delete _this._unsafeCallUpdate;
                    });
                }
            };
            return function connectComponent(Component3) {
                var mapState = mapStateToProps(store2.getState(), Component3.defaultProps || {});
                Component3.properties && mapState && Object.keys(mapState).forEach(function(key) {
                    delete Component3.properties[key];
                });
                var unSubscribe = null;
                return function(_Component) {
                    _inherits2(Connect, _Component);
                    var _super = _createSuper2(Connect);
                    function Connect(props, isPage) {
                        var _this2;
                        _classCallCheck2(this, Connect);
                        _this2 = _super.call(this, Object.assign.apply(Object, Array.prototype.slice.call(arguments).concat([
                            mergeObjects(mapStateToProps(store2.getState(), props), initMapDispatch)
                        ])), isPage);
                        Object.keys(initMapDispatch).forEach(function(key) {
                            _this2["__event_".concat(key)] = initMapDispatch[key];
                        });
                        return _this2;
                    }
                    _createClass2(Connect, [
                        {
                            key: "_constructor",
                            value: function _constructor() {
                                if (!this.$scope) {
                                    if (_get(_getPrototypeOf2(Connect.prototype), "_constructor", this)) {
                                        _get(_getPrototypeOf2(Connect.prototype), "_constructor", this).call(this, this.props);
                                    }
                                    return;
                                }
                                var store3 = getStore();
                                Object.assign(this.props, mergeObjects(mapStateToProps(store3.getState(), this.props), initMapDispatch));
                                unSubscribe = store3.subscribe(stateListener.bind(this));
                                if (_get(_getPrototypeOf2(Connect.prototype), "_constructor", this)) {
                                    _get(_getPrototypeOf2(Connect.prototype), "_constructor", this).call(this, this.props);
                                }
                            }
                        },
                        {
                            key: "componentWillUnmount",
                            value: function componentWillUnmount() {
                                if (_get(_getPrototypeOf2(Connect.prototype), "componentWillUnmount", this)) {
                                    _get(_getPrototypeOf2(Connect.prototype), "componentWillUnmount", this).call(this);
                                }
                                if (unSubscribe) {
                                    unSubscribe();
                                }
                                unSubscribe = null;
                            }
                        }
                    ]);
                    return Connect;
                }(Component3);
            };
        }
        var Provider = function Provider2() {
            _classCallCheck2(this, Provider2);
        };
        var ReduxContext = Taro__default.createContext(null);
        function useReduxContext() {
            var contextValue = Taro.useContext(ReduxContext);
            return contextValue;
        }
        function useStore() {
            var _useReduxContext = useReduxContext(), store2 = _useReduxContext.store;
            return store2;
        }
        function useDispatch() {
            var store2 = useStore();
            return store2.dispatch;
        }
        function defaultNoopBatch(callback) {
            callback();
        }
        var batch = defaultNoopBatch;
        var getBatch = function getBatch2() {
            return batch;
        };
        var CLEARED = null;
        var nullListeners = {
            notify: function notify() {}
        };
        function createListenerCollection() {
            var batch2 = getBatch();
            var current = [];
            var next = [];
            return {
                clear: function clear() {
                    next = CLEARED;
                    current = CLEARED;
                },
                notify: function notify() {
                    var listeners = current = next;
                    batch2(function() {
                        for(var i = 0; i < listeners.length; i++){
                            listeners[i]();
                        }
                    });
                },
                get: function get2() {
                    return next;
                },
                subscribe: function subscribe(listener) {
                    var isSubscribed = true;
                    if (next === current) next = current.slice();
                    next.push(listener);
                    return function unsubscribe() {
                        if (!isSubscribed || current === CLEARED) return;
                        isSubscribed = false;
                        if (next === current) next = current.slice();
                        next.splice(next.indexOf(listener), 1);
                    };
                }
            };
        }
        var Subscription = function() {
            function Subscription2(store2, parentSub) {
                _classCallCheck2(this, Subscription2);
                this.store = store2;
                this.parentSub = parentSub;
                this.unsubscribe = null;
                this.listeners = nullListeners;
                this.handleChangeWrapper = this.handleChangeWrapper.bind(this);
            }
            _createClass2(Subscription2, [
                {
                    key: "addNestedSub",
                    value: function addNestedSub(listener) {
                        this.trySubscribe();
                        return this.listeners.subscribe(listener);
                    }
                },
                {
                    key: "notifyNestedSubs",
                    value: function notifyNestedSubs() {
                        this.listeners.notify();
                    }
                },
                {
                    key: "handleChangeWrapper",
                    value: function handleChangeWrapper() {
                        if (this.onStateChange) {
                            this.onStateChange();
                        }
                    }
                },
                {
                    key: "isSubscribed",
                    value: function isSubscribed() {
                        return Boolean(this.unsubscribe);
                    }
                },
                {
                    key: "trySubscribe",
                    value: function trySubscribe() {
                        if (!this.unsubscribe) {
                            this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.handleChangeWrapper) : this.store.subscribe(this.handleChangeWrapper);
                            this.listeners = createListenerCollection();
                        }
                    }
                },
                {
                    key: "tryUnsubscribe",
                    value: function tryUnsubscribe() {
                        if (this.unsubscribe) {
                            this.unsubscribe();
                            this.unsubscribe = null;
                            this.listeners.clear();
                            this.listeners = nullListeners;
                        }
                    }
                }
            ]);
            return Subscription2;
        }();
        function invariant(condition, format, a, b, c, d, e, f) {
            if (!condition) {
                var error;
                if (format === void 0) {
                    error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
                } else {
                    var args = [
                        a,
                        b,
                        c,
                        d,
                        e,
                        f
                    ];
                    var argIndex = 0;
                    error = new Error(format.replace(/%s/g, function() {
                        return args[argIndex++];
                    }));
                    error.name = "Invariant Violation";
                }
                error.framesToPop = 1;
                throw error;
            }
        }
        var refEquality = function refEquality2(a, b) {
            return a === b;
        };
        function useSelector(selector) {
            var equalityFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : refEquality;
            invariant(selector, "You must pass a selector to useSelectors");
            var _useReduxContext = useReduxContext(), store2 = _useReduxContext.store, contextSub = _useReduxContext.subscription;
            var _useReducer = Taro.useReducer(function(s) {
                return s + 1;
            }, 0), _useReducer2 = _slicedToArray(_useReducer, 2), forceRender = _useReducer2[1];
            var subscription = Taro.useMemo(function() {
                return new Subscription(store2, contextSub);
            }, [
                store2,
                contextSub
            ]);
            var latestSubscriptionCallbackError = Taro.useRef();
            var latestSelector = Taro.useRef();
            var latestSelectedState = Taro.useRef();
            var selectedState;
            try {
                if (selector !== latestSelector.current || latestSubscriptionCallbackError.current) {
                    selectedState = selector(store2.getState());
                } else {
                    selectedState = latestSelectedState.current;
                }
            } catch (err) {
                var errorMessage = "An error occured while selecting the store state: ".concat(err.message, ".");
                if (latestSubscriptionCallbackError.current) {
                    errorMessage += "\nThe error may be correlated with this previous error:\n".concat(latestSubscriptionCallbackError.current.stack, "\n\nOriginal stack trace:");
                }
                throw new Error(errorMessage);
            }
            Taro.useEffect(function() {
                latestSelector.current = selector;
                latestSelectedState.current = selectedState;
                latestSubscriptionCallbackError.current = void 0;
            });
            Taro.useEffect(function() {
                function checkForUpdates() {
                    try {
                        var newSelectedState = latestSelector.current(store2.getState());
                        if (equalityFn(newSelectedState, latestSelectedState.current)) {
                            return;
                        }
                        latestSelectedState.current = newSelectedState;
                    } catch (err) {
                        latestSubscriptionCallbackError.current = err;
                    }
                    forceRender({});
                }
                subscription.onStateChange = checkForUpdates;
                subscription.trySubscribe();
                checkForUpdates();
                return function() {
                    return subscription.tryUnsubscribe();
                };
            }, [
                store2,
                subscription
            ]);
            return selectedState;
        }
        var index2 = {
            connect,
            Provider,
            getStore,
            setStore,
            useDispatch,
            useSelector,
            useStore,
            ReduxContext
        };
        exports.default = index2;
        exports.connect = connect;
        exports.Provider = Provider;
        exports.getStore = getStore;
        exports.setStore = setStore;
        exports.useDispatch = useDispatch;
        exports.useSelector = useSelector;
        exports.useStore = useStore;
        exports.ReduxContext = ReduxContext;
    }
});
// node_modules/@tarojs/redux/index.js
var require_redux = (0,_chunk_P7VEE7PG_js__WEBPACK_IMPORTED_MODULE_0__.__commonJS)({
    "node_modules/@tarojs/redux/index.js" (exports, module) {
        module.exports = require_dist().default;
        module.exports.default = module.exports;
    }
});
// entry:@tarojs_redux
var require_tarojs_redux = (0,_chunk_P7VEE7PG_js__WEBPACK_IMPORTED_MODULE_0__.__commonJS)({
    "entry:@tarojs_redux" (exports, module) {
        module.exports = require_redux();
    }
});
/* harmony default export */ __webpack_exports__["default"] = (require_tarojs_redux());


/***/ }),

/***/ "./node_modules/.taro/weapp/prebundle/@tarojs_redux.js":
/*!*************************************************************!*\
  !*** ./node_modules/.taro/weapp/prebundle/@tarojs_redux.js ***!
  \*************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var m = __webpack_require__(/*! ./@tarojs_redux.core.js */ "./node_modules/.taro/weapp/prebundle/@tarojs_redux.core.js");
                   module.exports = m.default;
                   exports["default"] = module.exports;
                  

/***/ })

}]);